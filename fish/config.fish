if status is-interactive
    cowsay -f skeleton "Welcome, $USER! <3" | lolcat -h 0.75 -v 1
end

zoxide init fish | source
fzf --fish | source

### Arrbreviations
# Git
abbr -a gcm "git commit -m"
abbr -a gp "git push"
abbr -a gs "git status"
abbr -a ggraph "git log --graph --decorate --oneline"

# Packages 
abbr -a dnfi "sudo dnf install -y"
abbr -a uu "sudo dnf upgrade -y && flatpak update -y"

# Configs
abbr -a c_hyprland "nvim ~/.config/hypr/hyprland.conf"
abbr -a c_fish "nvim ~/.config/fish/config.fish"
abbr -a c_nvim "nvim ~/.config/nvim/init.lua"

# Misc
abbr -a fehh "feh --auto-zoom --scale-down"
abbr -a dfh "df -h | grep /dev/nvme0n1p3 | head -n 1 | awk '{print \$4;print \$5}'"
abbr -a ssys "sudo systemctl"
abbr ksh "kitty +kitten ssh"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
if test -f /home/yaroslav/anaconda3/bin/conda
    eval /home/yaroslav/anaconda3/bin/conda "shell.fish" "hook" $argv | source
else
    if test -f "/home/yaroslav/anaconda3/etc/fish/conf.d/conda.fish"
        . "/home/yaroslav/anaconda3/etc/fish/conf.d/conda.fish"
    else
        set -x PATH "/home/yaroslav/anaconda3/bin" $PATH
    end
end
# <<< conda initialize <<<


fish_add_path /home/yaroslav/.spicetify

set -q GHCUP_INSTALL_BASE_PREFIX[1]; or set GHCUP_INSTALL_BASE_PREFIX $HOME ; set -gx PATH $HOME/.cabal/bin /home/yaroslav/.ghcup/bin $PATH # ghcup-env

# Command completion for amper
# Generated by Clikt


### Setup for amper
set -l amper_subcommands 'build clean clean-shared-caches generate-completion init package publish run server show task test tool update'

## Options for amper
complete -c amper -n "not __fish_seen_subcommand_from $amper_subcommands" -l version -s v -d 'Show the version and exit'
complete -c amper -n "not __fish_seen_subcommand_from $amper_subcommands" -l root -r -F -d 'Amper project root'
complete -c amper -n "not __fish_seen_subcommand_from $amper_subcommands" -l log-level -r -fa "debug info warn error off" -d 'Console logging level'
complete -c amper -n "not __fish_seen_subcommand_from $amper_subcommands" -l shared-caches-root -r -F -d 'Path to the cache directory shared between all Amper projects'
complete -c amper -n "not __fish_seen_subcommand_from $amper_subcommands" -l async-profiler -d 'Profile Amper with Async Profiler'
complete -c amper -n "not __fish_seen_subcommand_from $amper_subcommands" -l build-output -r -F -d 'Root directory for build outputs. By default, this is the `build` directory under the project root.'
complete -c amper -n "not __fish_seen_subcommand_from $amper_subcommands" -s h -l help -d 'Show this message and exit'


### Setup for build
complete -c amper -f -n __fish_use_subcommand -a build -d 'Compile and link all code in the project'

## Options for build
complete -c amper -n "__fish_seen_subcommand_from build" -s m -l module -r -d 'The specific module to build (run the \'show modules\' command to get the modules list). This option can be repeated to build several modules.'
complete -c amper -n "__fish_seen_subcommand_from build" -s p -l platform -r -fa "js jvm wasm android linuxX64 linuxArm64 tvosArm64 tvosX64 tvosSimulatorArm64 macosX64 macosArm64 iosArm64 iosSimulatorArm64 iosX64 watchosArm64 watchosArm32 watchosDeviceArm64 watchosSimulatorArm64 mingwX64 androidNativeArm32 androidNativeArm64 androidNativeX64 androidNativeX86" -d 'Only build for the specified platform. This option can be repeated to build several platforms.'
complete -c amper -n "__fish_seen_subcommand_from build" -s v -l variant -r -fa "debug release" -d 'Build the specified variant. This option can be repeated to build several variants.'
complete -c amper -n "__fish_seen_subcommand_from build" -s h -l help -d 'Show this message and exit'


### Setup for clean
complete -c amper -f -n __fish_use_subcommand -a clean -d 'Remove the project\'s build output and caches'

## Options for clean
complete -c amper -n "__fish_seen_subcommand_from clean" -s h -l help -d 'Show this message and exit'


### Setup for clean-shared-caches
complete -c amper -f -n __fish_use_subcommand -a clean-shared-caches -d 'Remove the Amper caches that are shared between projects'

## Options for clean-shared-caches
complete -c amper -n "__fish_seen_subcommand_from clean-shared-caches" -s h -l help -d 'Show this message and exit'


### Setup for generate-completion
complete -c amper -f -n __fish_use_subcommand -a generate-completion -d 'Generate a tab-completion script for the Amper command for the given shell (bash, zsh, or fish)'

## Options for generate-completion
complete -c amper -n "__fish_seen_subcommand_from generate-completion" -s h -l help -d 'Show this message and exit'

## Arguments for generate-completion
complete -c amper -n "__fish_seen_subcommand_from generate-completion" -fa "bash zsh fish"


### Setup for init
complete -c amper -f -n __fish_use_subcommand -a init -d 'Initialize a new Amper project based on a template'

## Options for init
complete -c amper -n "__fish_seen_subcommand_from init" -s h -l help -d 'Show this message and exit'

## Arguments for init
complete -c amper -n "__fish_seen_subcommand_from init" -fa "compose-android compose-multiplatform compose-ios jvm-cli compose-desktop kmp-lib ktor-server multiplatform-cli spring-boot-java spring-boot-kotlin" -d 'The name of a project template (leave blank to select interactively from a list)'


### Setup for package
complete -c amper -f -n __fish_use_subcommand -a package -d 'Package the project artifacts for distribution'

## Options for package
complete -c amper -n "__fish_seen_subcommand_from package" -s m -l module -r -d 'The specific module to package (run the `show modules` command to get the modules list). This option can be repeated to package several modules.'
complete -c amper -n "__fish_seen_subcommand_from package" -s p -l platform -r -fa "js jvm wasm android linuxX64 linuxArm64 tvosArm64 tvosX64 tvosSimulatorArm64 macosX64 macosArm64 iosArm64 iosSimulatorArm64 iosX64 watchosArm64 watchosArm32 watchosDeviceArm64 watchosSimulatorArm64 mingwX64 androidNativeArm32 androidNativeArm64 androidNativeX64 androidNativeX86" -d 'The target platform to package for. This option can be repeated to package for several platforms.'
complete -c amper -n "__fish_seen_subcommand_from package" -s v -l variant -r -fa "debug release" -d 'The variant to package. This option can be repeated to package several variants.'
complete -c amper -n "__fish_seen_subcommand_from package" -s f -l format -r -fa "jar executable-jar aab" -d 'The output package format.'
complete -c amper -n "__fish_seen_subcommand_from package" -s h -l help -d 'Show this message and exit'


### Setup for publish
complete -c amper -f -n __fish_use_subcommand -a publish -d 'Publish modules to a repository'

## Options for publish
complete -c amper -n "__fish_seen_subcommand_from publish" -s m -l modules -r -d 'The modules to publish, delimited by `,`. By default, the `publish` command will publish all possible modules'
complete -c amper -n "__fish_seen_subcommand_from publish" -s h -l help -d 'Show this message and exit'

## Arguments for publish
complete -c amper -n "__fish_seen_subcommand_from publish"


### Setup for run
complete -c amper -f -n __fish_use_subcommand -a run -d 'Run your application'

## Options for run
complete -c amper -n "__fish_seen_subcommand_from run" -s m -l module -r -d 'Specific module to run (run the `show modules` command to get the modules list)'
complete -c amper -n "__fish_seen_subcommand_from run" -s p -l platform -r -fa "js jvm wasm android linuxX64 linuxArm64 tvosArm64 tvosX64 tvosSimulatorArm64 macosX64 macosArm64 iosArm64 iosSimulatorArm64 iosX64 watchosArm64 watchosArm32 watchosDeviceArm64 watchosSimulatorArm64 mingwX64 androidNativeArm32 androidNativeArm64 androidNativeX64 androidNativeX86" -d 'Run the app on specified platform. This option is only necessary if the module has multiple main functions for different platforms.'
complete -c amper -n "__fish_seen_subcommand_from run" -s d -l device-id -r -d 'Platform specific device ID of the device to install and run on. '
complete -c amper -n "__fish_seen_subcommand_from run" -s v -l variant -r -fa "debug release" -d 'Run the specified variant of the app'
complete -c amper -n "__fish_seen_subcommand_from run" -l jvm-args -r -d 'The JVM arguments to pass to the JVM running the application, separated by spaces.'
complete -c amper -n "__fish_seen_subcommand_from run" -l main-class -r -d 'Specifies the main class to run. This option is only applicable for JVM applications.'
complete -c amper -n "__fish_seen_subcommand_from run" -s h -l help -d 'Show this message and exit'

## Arguments for run
complete -c amper -n "__fish_seen_subcommand_from run"


### Setup for server
complete -c amper -f -n __fish_use_subcommand -a server -d 'Start a server that accepts tasks from Amper and runs them. The server runs on port 8000 by default.'

## Options for server
complete -c amper -n "__fish_seen_subcommand_from server" -s p -l port -r -d 'The port to listen on'
complete -c amper -n "__fish_seen_subcommand_from server" -s h -l help -d 'Show this message and exit'


### Setup for show
set -l amper_show_subcommands 'modules settings tasks'
complete -c amper -f -n __fish_use_subcommand -a show -d 'Show information about some aspect the project (modules, tasks, effective settings...). See help for details.'

## Options for show
complete -c amper -n "__fish_seen_subcommand_from show" -s h -l help -d 'Show this message and exit'


### Setup for modules
complete -c amper -f -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $amper_show_subcommands" -a modules -d 'List all modules in the project'

## Options for modules
complete -c amper -n "__fish_seen_subcommand_from modules" -s h -l help -d 'Show this message and exit'


### Setup for settings
complete -c amper -f -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $amper_show_subcommands" -a settings -d 'Print the effective Amper settings of each module'

## Options for settings
complete -c amper -n "__fish_seen_subcommand_from settings" -s h -l help -d 'Show this message and exit'


### Setup for tasks
complete -c amper -f -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $amper_show_subcommands" -a tasks -d 'List all tasks in the project and their dependencies'

## Options for tasks
complete -c amper -n "__fish_seen_subcommand_from tasks" -s h -l help -d 'Show this message and exit'


### Setup for task
complete -c amper -f -n __fish_use_subcommand -a task -d 'Run a task and its dependencies from the task graph'

## Options for task
complete -c amper -n "__fish_seen_subcommand_from task" -s h -l help -d 'Show this message and exit'

## Arguments for task
complete -c amper -n "__fish_seen_subcommand_from task" -d 'The name of the task to run'


### Setup for test
complete -c amper -f -n __fish_use_subcommand -a test -d 'Run tests in the project'

## Options for test
complete -c amper -n "__fish_seen_subcommand_from test" -s p -l platform -r -fa "js jvm wasm android linuxX64 linuxArm64 tvosArm64 tvosX64 tvosSimulatorArm64 macosX64 macosArm64 iosArm64 iosSimulatorArm64 iosX64 watchosArm64 watchosArm32 watchosDeviceArm64 watchosSimulatorArm64 mingwX64 androidNativeArm32 androidNativeArm64 androidNativeX64 androidNativeX86" -d 'Only run tests for the specified platform. The option can be repeated to test several platforms.'
complete -c amper -n "__fish_seen_subcommand_from test" -l include-test -r -d 'Only run the given test. The option can be repeated to run multiple specific tests.'
complete -c amper -n "__fish_seen_subcommand_from test" -l include-classes -r -d 'Only run tests classes or suites matching the given pattern.'
complete -c amper -n "__fish_seen_subcommand_from test" -l exclude-classes -r -d 'Do not run test classes or suites matching the given pattern.'
complete -c amper -n "__fish_seen_subcommand_from test" -l jvm-args -r -d 'The JVM arguments to pass to the JVM running the tests, separated by spaces.'
complete -c amper -n "__fish_seen_subcommand_from test" -s m -l include-module -r -d 'Only run tests from the given module. The option can be repeated to run tests from several modules.'
complete -c amper -n "__fish_seen_subcommand_from test" -l exclude-module -r -d 'Do not run tests from the given module. The option can be repeated to exclude several modules.'
complete -c amper -n "__fish_seen_subcommand_from test" -l format -r -fa "pretty teamcity" -d 'The format to use for test results:'
complete -c amper -n "__fish_seen_subcommand_from test" -s v -l variant -r -fa "debug release" -d 'Test the specified variant of the app'
complete -c amper -n "__fish_seen_subcommand_from test" -s h -l help -d 'Show this message and exit'


### Setup for tool
set -l amper_tool_subcommands 'jaeger jdk generate-keystore xcode-integration'
complete -c amper -f -n __fish_use_subcommand -a tool -d 'Run a tool'

## Options for tool
complete -c amper -n "__fish_seen_subcommand_from tool" -s h -l help -d 'Show this message and exit'


### Setup for jaeger
complete -c amper -f -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from $amper_tool_subcommands" -a jaeger -d 'Download and run Jaeger server https://www.jaegertracing.io'

## Options for jaeger
complete -c amper -n "__fish_seen_subcommand_from jaeger" -l open-browser -r -d 'Open Jaeger UI in browser if Jaeger successfully starts'
complete -c amper -n "__fish_seen_subcommand_from jaeger" -l jaeger-port -r -d 'The HTTP port to use for the Jaeger UI'
complete -c amper -n "__fish_seen_subcommand_from jaeger" -l jaeger-version -r -d 'The version of Jaeger to download and run'
complete -c amper -n "__fish_seen_subcommand_from jaeger" -s h -l help -d 'Show this message and exit'

## Arguments for jaeger
complete -c amper -n "__fish_seen_subcommand_from jaeger"


### Setup for jdk
set -l amper_tool_jdk_subcommands 'jstack jmap jps jcmd'
complete -c amper -f -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from $amper_tool_subcommands" -a jdk -d 'Run various tools from Amper default JDK'

## Options for jdk
complete -c amper -n "__fish_seen_subcommand_from jdk" -s h -l help -d 'Show this message and exit'


### Setup for jstack
complete -c amper -f -n "__fish_seen_subcommand_from jdk; and not __fish_seen_subcommand_from $amper_tool_jdk_subcommands" -a jstack 

## Options for jstack
complete -c amper -n "__fish_seen_subcommand_from jstack" -s h -l help -d 'Show this message and exit'

## Arguments for jstack
complete -c amper -n "__fish_seen_subcommand_from jstack"


### Setup for jmap
complete -c amper -f -n "__fish_seen_subcommand_from jdk; and not __fish_seen_subcommand_from $amper_tool_jdk_subcommands" -a jmap 

## Options for jmap
complete -c amper -n "__fish_seen_subcommand_from jmap" -s h -l help -d 'Show this message and exit'

## Arguments for jmap
complete -c amper -n "__fish_seen_subcommand_from jmap"


### Setup for jps
complete -c amper -f -n "__fish_seen_subcommand_from jdk; and not __fish_seen_subcommand_from $amper_tool_jdk_subcommands" -a jps 

## Options for jps
complete -c amper -n "__fish_seen_subcommand_from jps" -s h -l help -d 'Show this message and exit'

## Arguments for jps
complete -c amper -n "__fish_seen_subcommand_from jps"


### Setup for jcmd
complete -c amper -f -n "__fish_seen_subcommand_from jdk; and not __fish_seen_subcommand_from $amper_tool_jdk_subcommands" -a jcmd 

## Options for jcmd
complete -c amper -n "__fish_seen_subcommand_from jcmd" -s h -l help -d 'Show this message and exit'

## Arguments for jcmd
complete -c amper -n "__fish_seen_subcommand_from jcmd"


### Setup for generate-keystore
complete -c amper -f -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from $amper_tool_subcommands" -a generate-keystore -d 'Generate keystore'

## Options for generate-keystore
complete -c amper -n "__fish_seen_subcommand_from generate-keystore" -l properties-file -r -F -d 'Path to properties file which is used to populate `storeFile`, `storePassword`, `keyAlias`, `keyPassword` during the generation'
complete -c amper -n "__fish_seen_subcommand_from generate-keystore" -l keystore-file -r -F -d 'Where to store keystore'
complete -c amper -n "__fish_seen_subcommand_from generate-keystore" -l keystore-password -r -d 'Keystore password'
complete -c amper -n "__fish_seen_subcommand_from generate-keystore" -l key-alias -r -d 'Key alias'
complete -c amper -n "__fish_seen_subcommand_from generate-keystore" -l key-password -r -d 'Key password'
complete -c amper -n "__fish_seen_subcommand_from generate-keystore" -l dn -r -d 'issuer'
complete -c amper -n "__fish_seen_subcommand_from generate-keystore" -s h -l help -d 'Show this message and exit'


### Setup for xcode-integration
complete -c amper -f -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from $amper_tool_subcommands" -a xcode-integration 

## Options for xcode-integration
complete -c amper -n "__fish_seen_subcommand_from xcode-integration" -s h -l help -d 'Show this message and exit'


### Setup for update
complete -c amper -f -n __fish_use_subcommand -a update -d 'Update Amper to the latest version'

## Options for update
complete -c amper -n "__fish_seen_subcommand_from update" -s r -l repository -r -d 'The URL of the maven repository to download the Amper scripts from'
complete -c amper -n "__fish_seen_subcommand_from update" -l dev -d 'Use the latest development version instead of the official release'
complete -c amper -n "__fish_seen_subcommand_from update" -l target-version -r -d 'The specific version to update to. By default, the latest version is used.'
complete -c amper -n "__fish_seen_subcommand_from update" -s c -l create -d 'Create the Amper scripts if they don\'t exist yet'
complete -c amper -n "__fish_seen_subcommand_from update" -s h -l help -d 'Show this message and exit'
